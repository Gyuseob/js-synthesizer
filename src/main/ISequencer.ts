
import ISynthesizer from './ISynthesizer';
import SequencerEvent from './SequencerEvent';

/**
 * Abstract sequencer object, to process MIDI events with timestamp for scheduling.
 */
export default interface ISequencer {
	/**
	 * Close the sequencer and release its resources.
	 * After closed, all other methods cannot be used.
	 */
	close(): void;
	/**
	 * Register the destination synthesizer for events.
	 * The sequencer object must be generated by the specified synthesizer object.
	 * @param synth the synthesizer object or raw synthesizer instance value for the destination.
	 */
	registerSynthesizer(synth: ISynthesizer | number): Promise<void>;
	/**
	 * Set the time scale for the events.
	 * @param scale time scale value in ticks per second (default is 1000 for 1 tick per millisecond, max is 1000)
	 */
	setTimeScale(scale: number): void;
	/**
	 * Get the time scale for the events. The return value is ticks per second.
	 * @return resolved with time scale value
	 */
	getTimeScale(): Promise<number>;
	/**
	 * Get the current tick value of the sequencer.
	 * Note that the return value is differ from actual current value
	 * if rendering synthesizer is active.
	 * @return resolved with tick value
	 */
	getTick(): Promise<number>;
	/**
	 * Send event at the specified timing.
	 * @param event event data
	 * @param tick tick value to process event at (depend on the time scale)
	 * @param isAbsolute true if tick is an absolute value, or
	 *     false if tick is the relative value from the current time
	 */
	sendEventAt(event: SequencerEvent, tick: number, isAbsolute: boolean): void;
}
